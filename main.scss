@use 'sass:list';
@use 'sass:map';
@use 'sass:string';
@use './functions' as f;

$input-size: 28 * 28;

@property --inf-time {
  syntax: '<time>';
  inherits: true;
  initial-value: 999999999s;
}

:root {
  $transitions: ();
  @for $i from 0 to $input-size {
    $transitions: list.append(
      $transitions,
      --in-#{$i} var(--inf-time) var(--inf-time),
      $separator: comma
    );
  }
  transition: $transitions;
}

* {
  font-family: monospace;
}

header {
  margin-bottom: 1rem;
}

body {
  margin: 1rem;
}

.cell {
  width: var(--cell-size);
  height: var(--cell-size);
}

.grid {
  --cell-size: 10px;
  padding: 0;
  margin-bottom: 0.75rem;
  display: flex;
  flex-wrap: wrap;
  border: 2px solid dimgray;
  user-select: none;
  cursor: crosshair;
}

@for $i from 0 to $input-size {
  .cell-#{$i} {
    background-color: hsl(0 0% calc(var(--in-#{$i}) * 100%));
  }

  :root:has(.cell:active):has(.cell-#{$i}:hover) {
    $transitions: ();
    @for $j from 0 to $input-size {
      $duration: var(--inf-time);
      $delay: var(--inf-time);
      @if $j == $i {
        $duration: 0s;
        $delay: 0s;
      }
      $transitions: list.append(
        $transitions,
        --in-#{$j} #{$duration} #{$delay},
        $separator: comma
      );
    }
    --in-#{$i}: 1;
    transition: $transitions;
  }
}

.clear {
  margin-bottom: 0.75rem;
}

:root:has(.clear:active) {
  transition: none;
}

@property --prediction {
  syntax: '<number>';
  inherits: true;
  initial-value: 0;
}

.debug::after {
  $counter-resets: ();
  $contents: ();
  @for $i from 0 to 10 {
    $foo: f.split-number(--out-#{$i}, 5);
    @include f.apply-vars(map.get($foo, 'variables'));
    $counter-resets: list.append($counter-resets, map.get($foo, 'counter-reset'));
    $contents: list.append($contents, '\A --out-#{$i}: ' map.get($foo, 'content'));
  }

  $outs: ();
  @for $i from 0 to 10 {
    $outs: list.append($outs, var(--out-#{$i}), $separator: comma);
  }
  --max-value: max(#{$outs});
  $expression: '';
  @for $i from 0 to 10 {
    --is-max-#{$i}: calc(1 - clamp(0, (var(--max-value) - var(--out-#{$i}) - 0.000001) * infinity, 1));
    $expression: $expression + '(var(--is-max-#{$i}) * #{$i})';
    @if $i < 9 {
      $expression: $expression + ' + ';
    }
  }
  --prediction: calc(#{$expression});
  counter-reset: $counter-resets prediction var(--prediction);
  content: $contents '\A prediction: ' counter(prediction);
  white-space: pre-wrap;
}

// .test::after {
//   counter-reset: i0 var(--in-0);
//   content: '\A --in-0: ' counter(i0);
//   white-space: pre-wrap;
// }
