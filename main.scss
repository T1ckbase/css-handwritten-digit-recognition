@use 'sass:list';

$input-size: 28 * 28;

@property --inf-time {
  syntax: '<time>';
  inherits: true;
  initial-value: 999999999s;
}

:root {
  $transitions: ();
  @for $i from 0 to $input-size {
    $transitions: list.append(
      $transitions,
      --in-#{$i} var(--inf-time) var(--inf-time),
      $separator: comma
    );
  }
  transition: $transitions;
}

body {
  font-family: monospace;
}

.cell {
  width: var(--cell-size);
  height: var(--cell-size);
  /* background-color: #1f2f2f; */
  /* transition: background-color 1000s 1000s; */
}

.grid {
  --cell-size: 10px;
  display: flex;
  flex-wrap: wrap;
  border: 1px solid #ccc;
  padding: 5px;
  user-select: none;
  cursor: crosshair;
}

@for $i from 0 to $input-size {
  .cell-#{$i} {
    background-color: hsl(0 0% calc(var(--in-#{$i}) * 100%));
  }

  :root:has(.cell:active):has(.cell-#{$i}:hover) {
    $transitions: ();
    @for $j from 0 to $input-size {
      $duration: var(--inf-time);
      $delay: var(--inf-time);
      @if $j == $i {
        $duration: 0s;
        $delay: 0s;
      }
      $transitions: list.append(
        $transitions,
        --in-#{$j} #{$duration} #{$delay},
        $separator: comma
      );
    }
    --in-#{$i}: 1;
    transition: $transitions;
  }
}

.debug::after {
  counter-reset: o0i var(--out-0-integer-part) o0d var(--out-0-decimal-part) o1i var(--out-1-integer-part) o1d var(--out-1-decimal-part) o2i
    var(--out-2-integer-part) o2d var(--out-2-decimal-part) o3i var(--out-3-integer-part) o3d var(--out-3-decimal-part) o4i var(--out-4-integer-part) o4d
    var(--out-4-decimal-part) o5i var(--out-5-integer-part) o5d var(--out-5-decimal-part) o6i var(--out-6-integer-part) o6d var(--out-6-decimal-part) o7i
    var(--out-7-integer-part) o7d var(--out-7-decimal-part) o8i var(--out-8-integer-part) o8d var(--out-8-decimal-part) o9i var(--out-9-integer-part) o9d
    var(--out-9-decimal-part) i0 var(--in-0) conv-pre-0-0-i var(--conv-pre-0-0-integer-part) conv-pre-0-0-d var(--conv-pre-0-0-decimal-part);
  content: '\A 0: ' counter(o0i) '.' counter(o0d) '\A 1: ' counter(o1i) '.' counter(o1d) '\A 2: ' counter(o2i) '.' counter(o2d) '\A 3: ' counter(o3i) '.'
    counter(o3d) '\A 4: ' counter(o4i) '.' counter(o4d) '\A 5: ' counter(o5i) '.' counter(o5d) '\A 6: ' counter(o6i) '.' counter(o6d) '\A 7: ' counter(o7i) '.'
    counter(o7d) '\A 8: ' counter(o8i) '.' counter(o8d) '\A 9: ' counter(o9i) '.' counter(o9d) '\A input-0: ' counter(i0) '\A --conv-pre-0-0: '
    counter(conv-pre-0-0-i) '.' counter(conv-pre-0-0-d);
  white-space: pre-wrap;
  --out-0-integer-part: calc(round(to-zero, var(--out-0)));
  --out-0-decimal-part: calc(round(calc((abs(var(--out-0)) - abs(var(--out-0-integer-part))) * 100)));
  --out-1-integer-part: calc(round(to-zero, var(--out-1)));
  --out-1-decimal-part: calc(round(calc((abs(var(--out-1)) - abs(var(--out-1-integer-part))) * 100)));
  --out-2-integer-part: calc(round(to-zero, var(--out-2)));
  --out-2-decimal-part: calc(round(calc((abs(var(--out-2)) - abs(var(--out-2-integer-part))) * 100)));
  --out-3-integer-part: calc(round(to-zero, var(--out-3)));
  --out-3-decimal-part: calc(round(calc((abs(var(--out-3)) - abs(var(--out-3-integer-part))) * 100)));
  --out-4-integer-part: calc(round(to-zero, var(--out-4)));
  --out-4-decimal-part: calc(round(calc((abs(var(--out-4)) - abs(var(--out-4-integer-part))) * 100)));
  --out-5-integer-part: calc(round(to-zero, var(--out-5)));
  --out-5-decimal-part: calc(round(calc((abs(var(--out-5)) - abs(var(--out-5-integer-part))) * 100)));
  --out-6-integer-part: calc(round(to-zero, var(--out-6)));
  --out-6-decimal-part: calc(round(calc((abs(var(--out-6)) - abs(var(--out-6-integer-part))) * 100)));
  --out-7-integer-part: calc(round(to-zero, var(--out-7)));
  --out-7-decimal-part: calc(round(calc((abs(var(--out-7)) - abs(var(--out-7-integer-part))) * 100)));
  --out-8-integer-part: calc(round(to-zero, var(--out-8)));
  --out-8-decimal-part: calc(round(calc((abs(var(--out-8)) - abs(var(--out-8-integer-part))) * 100)));
  --out-9-integer-part: calc(round(to-zero, var(--out-9)));
  --out-9-decimal-part: calc(round(calc((abs(var(--out-9)) - abs(var(--out-9-integer-part))) * 100)));
  --conv-pre-0-0-integer-part: calc(round(to-zero, var(--conv-pre-0-0)));
  --conv-pre-0-0-decimal-part: calc(round(calc((abs(var(--conv-pre-0-0)) - abs(var(--conv-pre-0-0-integer-part))) * 100)));
}

.test::after {
  counter-reset: i0 var(--in-0);
  content: '\A --in-0: ' counter(i0);
  white-space: pre-wrap;
}
